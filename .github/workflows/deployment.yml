name: Deployment ðŸš€
on: deployment
concurrency: ci-${{ github.event.deployment.environment }}
jobs:
  set-config:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      credentials-key: ${{ steps[github.event.deployment.environment].outputs.credentials_key_name }}
    steps:
      - id: prod
        if: github.event.deployment.environment == 'prod'
        shell: bash
        run: echo "credentials_key_name=SERVICE_ACCOUNT_KEY" >> $GITHUB_OUTPUT
  deploy:
    name: 'deploy ref ${{ github.event.deployment.ref }} to ${{ github.event.deployment.environment }}'
    runs-on: ubuntu-latest
    needs:
      - set-config
    timeout-minutes: 60
    env:
      TERRAFORM_VERSION: '1.3.7'
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.deployment.ref }}
      - uses: actions/setup-node@v3
        with:
          node-version: '18.13.0'
      - name: configure gcp credentials
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets[needs.set-config.outputs.credentials-key] }}
      - name: prepare terraform files for ${{ github.event.deployment.environment }} environment
        shell: bash
        run: |
          cp -r terraform/service/ terraform/service-${{ github.event.deployment.environment }}
          cp -r terraform/routing/ terraform/routing-${{ github.event.deployment.environment }}
      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: setup github http auth
        shell: bash
        run: |
          echo "https://bbeesley-bot:${{ secrets.GH_PA_TOKEN }}@github.com" > "${HOME}/.git-credentials"
          git config --global credential.helper store
      - name: terraform init - service
        shell: bash
        run: |
          terraform init \
          -backend-config="config/${{ github.event.deployment.environment }}/config.remote" \
          -input=false \
          -lock=false
        working-directory: terraform/service-${{ github.event.deployment.environment }}
      - name: terraform plan - service
        shell: bash
        run: |
            terraform plan \
            -var-file="config/${{ github.event.deployment.environment }}/terraform.tfvars" \
            -var="build_number=${{ github.run_id }}" \
            -var="commit_sha=${GITHUB_SHA:0:10}" \
            -lock-timeout=3500s \
            -no-color \
            -input=false \
            -out="plan-${{ github.event.deployment.environment }}-service-${{ github.run_id }}.tfplan"
        working-directory: terraform/service-${{ github.event.deployment.environment }}
      - name: terraform apply - service
        if: github.event.deployment.task == 'deploy'
        shell: bash
        run: |
            if [[ -f "plan-${{ github.event.deployment.environment }}-service-${{ github.run_id }}.tfplan" ]]
            then
              terraform apply \
              -lock-timeout=3500s \
              -auto-approve \
              -no-color \
              -input=false \
              "plan-${{ github.event.deployment.environment }}-service-${{ github.run_id }}.tfplan"
            else
               echo "No planned changes"
            fi
        working-directory: terraform/service-${{ github.event.deployment.environment }}
      - name: terraform init - routing
        shell: bash
        run: |
          terraform init \
          -backend-config="config/${{ github.event.deployment.environment }}/config.remote" \
          -input=false \
          -lock=false
        working-directory: terraform/routing-${{ github.event.deployment.environment }}
      - name: terraform plan - routing
        env:
          TF_VAR_newrelic_license_key: ${{ secrets[needs.set-config.outputs.nrLicenceSecretName] }}
          TF_VAR_newrelic_api_key: ${{ secrets[needs.set-config.outputs.nrApiKeySecretName] }}
        shell: bash
        run: |
            terraform plan \
            -var-file="config/${{ github.event.deployment.environment }}/terraform.tfvars" \
            -var="build_number=${{ github.run_id }}" \
            -var="commit_sha=${GITHUB_SHA:0:10}" \
            -lock-timeout=3500s \
            -no-color \
            -input=false \
            -out="plan-${{ github.event.deployment.environment }}-routing-${{ github.run_id }}.tfplan"
        working-directory: terraform/routing-${{ github.event.deployment.environment }}
      - name: terraform apply - routing
        shell: bash
        run: |
            if [[ -f "plan-${{ github.event.deployment.environment }}-routing-${{ github.run_id }}.tfplan" ]]
            then
              terraform apply \
              -lock-timeout=3500s \
              -auto-approve \
              -no-color \
              -input=false \
              "plan-${{ github.event.deployment.environment }}-routing-${{ github.run_id }}.tfplan"
            else
              echo "No planned changes"
            fi
        working-directory: terraform/routing-${{ github.event.deployment.environment }}
      - name: mark deployment as successful
        if: ${{ success() }}
        shell: bash
        run: |
          curl -X POST https://api.github.com/repos/${{ github.repository }}/deployments/${{ github.event.deployment.id }}/statuses \
          -u ${{ secrets.GH_PA_TOKEN }} \
          --data '{"state": "success", "environment": "${{ github.event.deployment.environment }}", "description": "Completed deployment of ${{ github.event.deployment.ref }} to ${{ github.event.deployment.environment }}"}'
      - name: mark deployment as failed
        if: ${{ failure() }}
        shell: bash
        run: |
          curl -X POST https://api.github.com/repos/${{ github.repository }}/deployments/${{ github.event.deployment.id }}/statuses \
          -u ${{ secrets.GH_PA_TOKEN }} \
          --data '{"state": "failure", "environment": "${{ github.event.deployment.environment }}", "description": "Failed deployment of ${{ github.event.deployment.ref }} to ${{ github.event.deployment.environment }}"}'
      - name: mark deployment as cancelled
        if: ${{ cancelled() }}
        shell: bash
        run: |
          curl -X POST https://api.github.com/repos/${{ github.repository }}/deployments/${{ github.event.deployment.id }}/statuses \
          -u ${{ secrets.GH_PA_TOKEN }} \
          --data '{"state": "failure", "environment": "${{ github.event.deployment.environment }}", "description": "Cancelled deployment of ${{ github.event.deployment.ref }} to ${{ github.event.deployment.environment }}"}'
