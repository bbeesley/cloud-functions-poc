name: Build & Test Common
on:
  workflow_call:
    inputs:
      actor:
        required: true
        type: string
      ref:
        required: true
        type: string
      commit:
        required: true
        type: string
      is_main_branch:
        required: true
        type: boolean
env:
  TERRAFORM_VERSION: '1.3.7'
  TERRAFORM_SERVICE_SHORT_NAME: 'gcp-poc'
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          persist-credentials: false
      - uses: actions/setup-node@v3
        with:
          node-version: '18.13.0'
      - uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
            packages/*/dist
            packages/*/package.json
          key: ${{ inputs.commit }}-test
      - name: install
        shell: bash
        run: |
          npm ci
          npm run bootstrap
      - name: test
        shell: bash
        run: npm test
      - name: release
        if: inputs.is_main_branch
        env:
          GH_TOKEN: ${{ secrets.MY_PA_TOKEN }}
        run: |
          echo "unsafe-perm = true" >> ~/.npmrc
          npm run release
  upload-fn-zips:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - uses: actions/setup-node@v3
        with:
          node-version: '18.13.0'
      - uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
            packages/*/dist
            packages/*/package.json
          key: ${{ inputs.commit }}-test
      - name: configure gcp credentials
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.SERVICE_ACCOUNT_KEY }}
      - name: upload artifacts
        env:
          INPUT_SHA: ${{ inputs.commit }}
          DEBUG: 'true'
        shell: bash
        run: |
          npx lerna run push
  docker-publish:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20
    env:
      CONTAINER_REGISTRY: europe-west2-docker.pkg.dev
    strategy:
      matrix:
        include:
          - service: fortune-nodejs
            docker-context: packages/fortune-nodejs
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - uses: actions/setup-node@v3
        with:
          node-version: '18.13.0'
      - uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
            packages/*/dist
            packages/*/package.json
          key: ${{ inputs.commit }}-test
      - name: docker build tag & publish
        env:
          REF: ${{ inputs.commit }}
        run: |
          export IMAGE_TAG="${REF:0:10}"
          docker login -u _json_key -p '${{ secrets.SERVICE_ACCOUNT_KEY }}' "https://${CONTAINER_REGISTRY}" 2>/dev/null
          docker build -f ${{ matrix.docker-context }}/Dockerfile -t $CONTAINER_REGISTRY/$TERRAFORM_SERVICE_SHORT_NAME-${{ matrix.service }}:$IMAGE_TAG ${{ matrix.docker-context }}
          docker push $CONTAINER_REGISTRY/$TERRAFORM_SERVICE_SHORT_NAME-${{ matrix.service }}:$IMAGE_TAG
  plan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      REF: ${{ inputs.commit }}
    strategy:
      matrix:
        include:
          - stage: prod
            credentials-key: SERVICE_ACCOUNT_KEY
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - name: configure gcp credentials
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.SERVICE_ACCOUNT_KEY }}
      - name: prepare terraform files for ${{ matrix.stage }} environment
        shell: bash
        run: |
          cp -r terraform/service/ terraform/service-${{ matrix.stage }}
          cp -r terraform/routing/ terraform/routing-${{ matrix.stage }}
      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: setup github http auth
        shell: bash
        run: |
          echo "https://bbeesley-bot:${{ secrets.GH_PA_TOKEN }}@github.com" > "${HOME}/.git-credentials"
          git config --global credential.helper store
      - name: terraform init - service
        env:
          TF_DATA_DIR: terraform/service-${{ matrix.stage }}.terraform
        shell: bash
        run: |
          terraform init \
          -backend-config="config/${{ matrix.stage }}/config.remote" \
          -input=false \
          -lock=false
        working-directory: terraform/service-${{ matrix.stage }}
      - name: terraform plan - service
        env:
          TF_DATA_DIR: terraform/service-${{ matrix.stage }}.terraform
        shell: bash
        run: |
          terraform plan \
          -var-file="config/${{ matrix.stage }}/terraform.tfvars" \
          -var="build_number=${{ github.run_id }}" \
          -var="commit_sha=${REF:0:10}" \
          -input=false \
          -lock=false
        working-directory: terraform/service-${{ matrix.stage }}
      - name: terraform init - routing
        env:
          TF_DATA_DIR: terraform/routing-${{ matrix.stage }}.terraform
        shell: bash
        run: |
          terraform init \
          -backend-config="config/${{ matrix.stage }}/config.remote" \
          -input=false \
          -lock=false
        working-directory: terraform/routing-${{ matrix.stage }}
      - name: terraform plan - routing
        env:
          TF_DATA_DIR: terraform/routing-${{ matrix.stage }}.terraform
        shell: bash
        run: |
          terraform plan \
          -var-file="config/${{ matrix.stage }}/terraform.tfvars" \
          -var="build_number=${{ github.run_id }}" \
          -var="commit_sha=${REF:0:10}" \
          -input=false \
          -lock=false
        working-directory: terraform/routing-${{ matrix.stage }}
